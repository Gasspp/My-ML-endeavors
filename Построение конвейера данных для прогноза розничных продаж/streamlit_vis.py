# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st                    # Web-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
import pandas as pd                      # –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
import plotly.express as px              # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
from catboost import CatBoostRegressor, Pool  # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ CatBoost –∏ –æ–±—ë—Ä—Ç–∫–∞ Pool –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
import os
# === –ö–ê–°–¢–û–ú–ù–´–ô CSS –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
# –ú–µ–Ω—è–µ–º —Ñ–æ–Ω, –æ—Ç—Å—Ç—É–ø—ã –∏ —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫
st.markdown("""
    <style>
    .main {
        background-color: #f9f9f9;
    }
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    h1 {
        color: #134e4a;
    }
    .stButton>button {
        background-color: #134e4a;
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
st.title("üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")

# === –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ ===
with st.sidebar:
    st.header("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .csv —Ñ–∞–π–ª", type=["csv"])  # –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞
    st.markdown("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:")
    st.code("market, date, time, good_id, price, discount, rating, sales_lag_1, rolling_mean_7")
    st.markdown("---")
    st.caption("–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –º–æ–¥–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")

# === –ï–°–õ–ò –§–ê–ô–õ –ó–ê–ì–†–£–ñ–ï–ù ===
if uploaded_file:
    df = pd.read_csv(uploaded_file)  # –ß—Ç–µ–Ω–∏–µ CSV –≤ DataFrame

    # –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∞–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
    expected_columns = {
        'market', 'date', 'time', 'good_id', 'price', 'discount',
        'rating', 'sales_lag_1', 'rolling_mean_7'
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    if not expected_columns.issubset(df.columns):
        st.error(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫: {expected_columns - set(df.columns)}")
    else:
        # === –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ 'date' –∏ 'time' ===
        df['datetime'] = pd.to_datetime(df['date'] + ' ' + df['time'])
        df['hour'] = df['datetime'].dt.hour
        df['month'] = df['datetime'].dt.month
        df['weekday'] = df['datetime'].dt.day_name()  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        df['year'] = df['datetime'].dt.year

        # === –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É ===
        script_dir = os.path.dirname(os.path.abspath(__file__))

        # –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞
        model_path = os.path.join(script_dir, "catboost_model.cbm")

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ CatBoost ===
        model = CatBoostRegressor()
        model.load_model(model_path)

        # === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏—á–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ ===
        cat_features = ['market', 'good_id', 'weekday']  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        X = df[['market', 'good_id', 'price', 'discount', 'rating',
                'hour', 'month', 'weekday', 'year', 'sales_lag_1', 'rolling_mean_7']]  # –ú–æ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        pool = Pool(data=X, cat_features=cat_features)  # –û–±—ë—Ä—Ç–∫–∞ CatBoost –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏

        # === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'sales' ===
        df['sales'] = model.predict(pool)

        st.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ù–∏–∂–µ ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:")

        # === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 1: –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ ===
        st.markdown("### ‚è∞ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
        sales_by_hour = df.groupby('hour')['sales'].mean().reset_index()
        fig1 = px.bar(sales_by_hour, x='hour', y='sales', color='sales',
                      labels={'hour': '–ß–∞—Å', 'sales': '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏'},
                      color_continuous_scale='Blugrn')
        st.plotly_chart(fig1, use_container_width=True)

        # === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 2: –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –º–∞–≥–∞–∑–∏–Ω–∞ ===
        st.markdown("### ‚≠ê –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –º–∞–≥–∞–∑–∏–Ω–∞")
        sales_by_rating = df.groupby('rating')['sales'].mean().reset_index()
        fig2 = px.bar(sales_by_rating, x='rating', y='sales', color='sales',
                      labels={'rating': '–†–µ–π—Ç–∏–Ω–≥', 'sales': '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏'},
                      color_continuous_scale='Blugrn')
        st.plotly_chart(fig2, use_container_width=True)

        # === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 3: –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º ===
        st.markdown("### üí∏ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º")
        df['sales_bins'] = pd.cut(df['price'],
                                  bins=[0, 500, 1000, 2000, 3000, 4000, 5000],
                                  labels=['0‚Äì500', '500‚Äì1000', '1000‚Äì2000', '2000‚Äì3000', '3000‚Äì4000', '4000‚Äì5000'])
        sales_bins = df.groupby('sales_bins', observed=False)['sales'].sum().reset_index()
        fig3 = px.bar(sales_bins, x='sales_bins', y='sales', color='sales',
                      labels={'sales_bins': '–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω', 'sales': '–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂'},
                      color_continuous_scale='Blugrn')
        st.plotly_chart(fig3, use_container_width=True)

        # === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 4: –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ ===
        st.markdown("### üìÖ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
        weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        df['weekday'] = pd.Categorical(df['weekday'], categories=weekday_order, ordered=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π
        sales_by_weekday = df.groupby('weekday')['sales'].sum().reset_index().sort_values('weekday')

        fig4 = px.pie(sales_by_weekday, names='weekday', values='sales',
                      color_discrete_sequence=px.colors.sequential.Blugrn,
                      title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
        fig4.update_traces(
            textinfo='label+percent+value',         # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
            pull=[0.05] * 7,                         # –õ—ë–≥–∫–æ–µ "–≤—ã–¥–≤–∏–∂–µ–Ω–∏–µ" –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
            marker=dict(line=dict(color='#FFFFFF', width=2))  # –ë–µ–ª–∞—è –æ–±–≤–æ–¥–∫–∞ –º–µ–∂–¥—É —Å–µ–∫—Ç–æ—Ä–∞–º–∏
        )
        st.plotly_chart(fig4, use_container_width=True)

        # === –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
        st.markdown("---")
        st.markdown("### üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        output_filename = "predicted_sales.csv"
        df.to_csv(output_filename, index=False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –≤ CSV
        with open(output_filename, "rb") as f:
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (.csv)", f, file_name=output_filename)
